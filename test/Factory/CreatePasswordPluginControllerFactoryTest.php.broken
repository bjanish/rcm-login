<?php
/**
 * Test for Factory PluginControllerFactory
 *
 * This file contains the test for the PluginControllerFactory.
 *
 * PHP version 5.3
 *
 * LICENSE: BSD
 *
 * @category  Reliv
 * @package   RcmCreateNewPassword
 * @author    Westin Shafer <wshafer@relivinc.com>
 * @copyright 2014 Reliv International
 * @license   License.txt New BSD License
 * @version   GIT: <git_id>
 * @link      https://github.com/reliv
 **/

namespace RcmCreateNewPasswordTest\Factory;

require_once
    __DIR__
    . '/../../../../../../App/test/Base/RelivBaseTestCase.php';

use RcmCreateNewPassword\Controller\PluginController;
use RcmCreateNewPassword\Factory\PluginControllerFactory;
use AppTest\Base\RelivBaseTestCase;
use Zend\Mvc\Controller\ControllerManager;
use Zend\ServiceManager\ServiceManager;

/**
 * Test for Factory PluginControllerFactory
 *
 * Test for Factory PluginControllerFactory
 *
 * @category  Reliv
 * @package   RcmCreateNewPassword
 * @author    Westin Shafer <wshafer@relivinc.com>
 * @copyright 2012 Reliv International
 * @license   License.txt New BSD License
 * @version   Release: 1.0
 * @link      https://github.com/reliv
 */
class PluginControllerFactoryTest extends RelivBaseTestCase
{
    const PLUGIN_NAME = 'RcmCreateNewPassword';

    /**
     * Setup for tests
     *
     * @return null
     * @covers \RcmCreateNewPassword\Factory\PluginControllerFactory
     */
    public function setUp()
    {
        $this->addModule('RcmCreateNewPassword');
        $this->addModule('RcmInstanceConfig');
        $this->addModule('RcmShoppingCart');
        $this->addModule('Vista');
        parent::setUp();
    }

    /**
     * Generic test for the constructor
     *
     * @return null
     * @covers \RcmCreateNewPassword\Factory\PluginControllerFactory
     */
    public function testCreateService()
    {
        $mockObject = $this->getMockBuilder('\Doctrine\ORM\EntityManager');
        $mockObject->disableOriginalConstructor();
        $mockEm = $mockObject->getMock();

        $mockObject = $this
            ->getMockBuilder('\RcmInstanceConfig\Service\PluginStorageMgr');
        $mockObject->disableOriginalConstructor();
        $mockIc = $mockObject->getMock();

        $mockObject = $this
            ->getMockBuilder('\App\Controller\TemplateMailer');
        $mockObject->disableOriginalConstructor();
        $mockTm = $mockObject->getMock();

        // Mock RcmUserManager
        $mockRcmUserService = $this
            ->getMockBuilder('\RcmUser\Service\RcmUserService')->getMock();

        $config = array(
            'rcmPlugin' => array(
                $this::PLUGIN_NAME => array(
                    'defaultInstanceConfig' => array()
                )
            )
        );

        $sm = new ServiceManager();
        $sm->setService('Doctrine\ORM\EntityManager', $mockEm);
        $sm->setService('config', $config);
        $sm->setService('templateMailer', $mockTm);
        $sm->setService('RcmUser\Service\RcmUserService', $mockRcmUserService);

        $cm = new ControllerManager();
        $cm->setServiceLocator($sm);

        $factory = new PluginControllerFactory();
        $object = $factory->createService($cm);

        $this->assertTrue($object instanceof PluginController);
    }
}
